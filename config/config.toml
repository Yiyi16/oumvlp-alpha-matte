# Refer to utils/config.py for definition and options.

version = "gca-dist"
dist = false

[model]
batch_size = 10
imagenet_pretrain = true
imagenet_pretrain_path = "mycheckpoints2/gca-dist/best_model.pth"
    [model.arch]
    encoder = "resnet_gca_encoder_29"
    decoder = "res_gca_decoder_22"

[train]
total_step = 200000
warmup_step = 0
#5000
val_step = 1000
clip_grad = true
G_lr = 4e-4
# Uncomment to resume training
resume_checkpoint = "best_model"
reset_lr = false


[data]
train_fg = "/home/yiyi/mm2020/Combined_Dataset/Training_set/fg"
train_alpha = "/home/yiyi/mm2020/Combined_Dataset/Training_set/alpha"
train_bg = "/home/yiyi/mm2020/edge-connect/checkpoints/results/refine"
#"/home/yiyi/mm2020/Combined_Dataset/Test_set/bg"
test_merged = "/home/yiyi/mm2020/Combined_Dataset/Test_set/merged"
#test_merged = "/home/yiyi/mm2020/GCA-full/demo/vis"
#"/home/yiyi/mm2020/Combined_Dataset/Test_set/merged"

test_alpha = "/home/yiyi/mm2020/Combined_Dataset/Test_set/alpha_copy"
#test_trimap = "/home/yiyi/mm2020/Combined_Dataset/Test_set/trimaps"
#test_trimap = "/home/yiyi/mm2020/GCA-full/demo/vis_trimap"
test_trimap = "/home/yiyi/mm2020/Combined_Dataset/Test_set/trimaps"
test_fg = "/home/yiyi/mm2020/Combined_Dataset/Test_set/fg_for_composite"
test_bg = "/home/yiyi/mm2020/Combined_Dataset/Test_set/bg_for_composite"
workers = 4
augmentation = true

[log]
tensorboard_path = "./logs2/tensorboard"
tensorboard_step = 100
tensorboard_image_step = 500
logging_path = "./logs2/stdout"
logging_step =  10
logging_level = "INFO"
checkpoint_path = "./mycheckpoints2"
checkpoint_step = 100


[test]
merged = "/home/yiyi/mm2020/Combined_Dataset/Test_set/merged"
alpha = "/home/yiyi/mm2020/Combined_Dataset/Test_set/alpha_copy"
trimap = "/home/yiyi/mm2020/Combined_Dataset/Test_set/trimaps"
test_fg = "/home/yiyi/mm2020/Combined_Dataset/Test_set/fg_for_composite"
test_bg = "/home/yiyi/mm2020/Combined_Dataset/Test_set/bg_for_composite"
scale = "origin"
#checkpoint = "best_model"
checkpoint = "best_model_33"
fast_eval = true
# Uncomment to save predicted alpha
alpha_path = "prediction"
